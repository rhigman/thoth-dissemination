# Logic shared between multiple workflows for disseminating one or more works
# (given as an array of work IDs) from Thoth to the specified platform.
name: disseminate

on:
  workflow_call:
    inputs:
      work-id:
        required: true
        type: string
      platform:
        required: true
        type: string

jobs:
  disseminate:
    runs-on: ubuntu-latest
    permissions:
      # Required for Google Play workflow
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies for lxml
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libxslt1-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Make all platform credentials available to later steps (with names lowercased)
        uses: oNaiPs/secrets-to-env-action@v1.5
        with:
          secrets: ${{ toJSON(secrets) }}
          convert: lower
          exclude: GOOGLE_WORKLOAD_ID_PROVIDER, GOOGLE_SERVICE_ACCOUNT

      - name: Checkout (google-github-actions/auth prerequisite)
        uses: actions/checkout@v4
        if: inputs.platform == 'GooglePlay'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        if: inputs.platform == 'GooglePlay'
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_ID_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - name: Run disseminator and save outputs
        run: |
          set -o pipefail
          python disseminator.py \
            --work ${{ inputs.work-id }} \
            --platform ${{ inputs.platform }} > ${{ inputs.work-id }} 2> /tmp/error.log || STATUS=$?
          ERROR_LOG=$(cat /tmp/error.log)
          if [ -n "$ERROR_LOG" ]; then
            echo "### Dissemination Errors" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$ERROR_LOG" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          exit ${STATUS:-0}

      - name: Upload output to artifact
        uses: actions/upload-artifact@v4
        if: contains(fromJSON('["InternetArchive", "CUL", "Figshare", "Zenodo"]'), inputs.platform)
        with:
          name: ${{ inputs.work-id }}
          path: ${{ inputs.work-id }}
          retention-days: 7
          if-no-files-found: ignore
          overwrite: false

  write-locations:
    runs-on: ubuntu-latest
    needs: disseminate
    if: contains(fromJSON('["InternetArchive", "CUL", "Figshare", "Zenodo"]'), inputs.platform)
    steps:
      - name: Checkout
        # This step deletes existing directory contents, so must be done before artifact download
        uses: actions/checkout@v4

      - name: Download disseminator output artifact containing location info
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.work-id }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements_write_locations.txt

      - name: Write locations to Thoth using Python script
        run: python write_locations.py ${{ inputs.work-id }}
        env:
          THOTH_EMAIL: ${{ secrets.THOTH_EMAIL }}
          THOTH_PWD: ${{ secrets.THOTH_PWD }}

  send-email:
    runs-on: ubuntu-latest
    needs: disseminate
    if: contains(fromJSON('["OAPEN", "EBSCOHost", "BKCI"]'), inputs.platform)
    steps:
      - name: Send notification email
        uses: dawidd6/action-send-mail@v3
        with:
          connection_url: ${{ secrets.THOTH_SMTP }}
          subject: New book submitted to ${{ inputs.platform }} via Thoth (${{ inputs.work-id }})
          # NB: Actions secrets names are case-insensitive, so no need to check/change casing of platform name
          to: ${{ secrets[format('{0}_NOTIF_EMAIL', inputs.platform)] }}
          from: Thoth Open Metadata <distribution@thoth.pub>
          body: Please find the metadata submission for https://thoth.pub/books/${{ inputs.work-id }} in your upload folder. We look forward to receiving the file location once registered. Thank you!
          cc: info@thoth.pub
